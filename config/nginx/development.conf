#user  nobody;
worker_processes  1;

error_log  /var/log/nginx.error.log notice;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  256;
}

daemon off;
master_process off;

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format main '$remote_addr - $http_x_forwarded_for $remote_user [$time_local] "$request" $http_content_length $status $body_bytes_sent "$http_referer" "$http_user_agent"';
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent $http_content_length "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_host" [$connector_id]';

    log_format  bytes '$connector_id|$body_bytes_sent';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    upstream database {
        postgres_server  127.0.0.1 dbname=portly user=piper password=piper;
    }

    server {
        set $connector_id '';
        listen       80;
        server_name  default;

        #charset koi8-r;
        access_log  /var/log/portly.access.log  main;

        location = /redis {
            internal;
            set_unescape_uri $key $arg_key;
            redis2_query hgetall $key;
            redis2_pass 127.0.0.1:6380;
        }

        location = /redis_bandwidth {
            internal;
            set_unescape_uri $key $arg_key;
            set_unescape_uri $amount $arg_amount;
            redis2_query incrby $key $amount;
            redis2_pass 127.0.0.1:6380;
        }

        location = /auth {
            internal;
            postgres_escape   $user $remote_user;
            postgres_escape   $pass $remote_passwd;
            postgres_escape   $conn $arg_connector_id;

            postgres_pass     database;
            postgres_query    "SELECT username FROM connector_auths WHERE
                               connector_id = $conn AND
                               username=$user AND password=$pass";
            postgres_rewrite  no_rows 401;
            postgres_output   none;
        }
        location = /basic_auth {
          internal;
          proxy_pass http://127.0.0.1:9393/basic_auth/$http_host;
        }

        location / {
          set $target '';
          set $dynamic_host '';
          access_by_lua '
                local key = ngx.var.http_host
                local res = ngx.location.capture(
                    "/redis", { args = { key = "tunnel:" .. key } }
                )

                if res.status ~= 200 then
                    ngx.log(ngx.ERR, "redis server returned bad status: ",
                        res.status)
                    ngx.exit(res.status)
                end

                if not res.body then
                    ngx.log(ngx.ERR, "redis returned empty body")
                    ngx.exit(500)
                end

                local parser = require "redis.parser"
                local server, typ = parser.parse_reply(res.body)
                if typ ~= parser.MULTI_BULK_REPLY or not server then
                    ngx.log(ngx.ERR, "bad redis response: ", res.body)
                    ngx.exit(500)
                end

                if server[2] == nil then
                  ngx.log(ngx.ERR, "Looking for dynamic route.", key)
                  local key_first = key:find(".", 1, true)
                  local dyn_key = "*" .. key:sub(key_first)

                  ngx.log(ngx.ERR, "looking for dynamic route: ", dyn_key)
                  res = ngx.location.capture(
                    "/redis", { args = { key = "tunnel:" .. dyn_key } }
                  )

                  ngx.log(ngx.ERR, "moving forward")

                  if res.status ~= 200 then
                    ngx.log(ngx.ERR, "redis server returned bad status: ",
                      res.status)
                    ngx.exit(res.status)
                  end
                  if not res.body then
                      ngx.log(ngx.ERR, "redis returned empty body")
                      ngx.exit(500)
                  end

                  local parser = require "redis.parser"
                  server, typ = parser.parse_reply(res.body)
                  if typ ~= parser.MULTI_BULK_REPLY or not server then
                      ngx.log(ngx.ERR, "bad redis response: ", res.body)
                      ngx.exit(500)
                  end

                  if server[2] == nil then
                    ngx.log(ngx.ERR, "Site not found", dyn_key)
                    ngx.exit(500)
                  end
                end
                if server[4] == "true" then
                  local auth_res = ngx.location.capture(
                    "/auth", { args = { connector_id = server[6] } }
                  )
                  if auth_res.status ~= 200 then
                    ngx.header["WWW-Authenticate"] = "Basic realm=Restricted"
                    ngx.exit(401)
                  end
                end
                ngx.var.connector_id = tostring(server[6])
                ngx.var.target = "127.0.0.1:" .. tostring(server[2])
                ngx.var.dynamic_host = server[8]
                print(ngx.var.dynamic_host)
                ngx.log(ngx.ERR, "Found: ", tostring(server[2]))

            ';
          proxy_set_header Connection '';
          proxy_http_version 1.1;
          chunked_transfer_encoding off;
          proxy_set_header Host $http_host;
          proxy_set_header X-Forwarded-For $dynamic_host;
          proxy_pass_header Content-Length;
          proxy_pass http://$target;
          proxy_redirect off;
          access_log  /var/log/portly.bytes.log  bytes;
        }
        #location / {
        #    root   public;
        #    index  index.html index.htm;
        #}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

